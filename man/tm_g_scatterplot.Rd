% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tm_g_scatterplot.R
\name{tm_g_scatterplot}
\alias{tm_g_scatterplot}
\title{Teal Module: scatter plot}
\usage{
tm_g_scatterplot(label, dataname, param_var, param, param_choices = param,
  xaxis_var, xaxis_var_choices = xaxis_var, yaxis_var,
  yaxis_var_choices = yaxis_var, trt_group, trt_group_choices, plot_width,
  plot_height, facet = FALSE, reg_line = FALSE, font_size, dot_size,
  hline = NULL, rotate_xlab = FALSE, man_color = NULL,
  pre_output = NULL,
  post_output = helpText("BASE2 = Screening Data, BASE2L2 = Log2(BASE2);\\n                                                    CHG2 = Change from Screening, PCHG2 =  \%Change from Screening;\\n                                                    BASE = BASELINE Data, BASEL2 = Log2(BASE);\\n                                                    CHG = Change from Baseline, PCHG =  \%Change from Baseline;\\n                                                    AVAL = Following Visits, AVALL2 = Log2(AVAL)"),
  code_data_processing = NULL)
}
\arguments{
\item{label}{menu item label of the module in the teal app}

\item{dataname}{analysis data used in teal module, needs to be available in
the list passed to the \code{data} argument of \code{\link[teal]{init}}.
Note that the data are expected to be in vertical form with the
\code{PARAMCD} variable filtering to one observation per patient per visit.}

\item{pre_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}

\item{post_output}{optional, \code{shiny.tag} with text placed before the
output to put the output into context. For example the
\code{\link[shiny]{helpText}} elements are useful.}
}
\value{
an \code{\link[teal]{module}} object#'
}
\description{
This shiny module displays a scatter plot
}
\details{
provide additional information as needed. link to specification file \url{http://rstudio.com}
}
\examples{

\dontrun{
# Example using analysis dataset for example ASL or ADSL,
# ALB points to biomarker data stored in a typical LB structure. for example ALB or ADLB.

# for development team testing
ASL_path <- "~/btk/lupus/dataadam/asl.sas7bdat"
ALB_path <- "~/btk/lupus/dataadam/alb3arm.sas7bdat"

# list of biomarkers of interest. see ALB2 assignment below
param_choices <- c("CRP","ADIGG","IG","IGA","IGE","IGG","IGM","TEST")

ASL0 <- read_bce(ASL_path)
ASL <- subset(ASL0, subset = ITTFL == 'Y' & IAFL == 'Y')

ALB0 <- read_bce(ALB_path)

# post process the data to subset records per specification
ALB_SUBSET <- subset(ALB0,
              subset = PARAMCD \%in\% c(param_choices) & ITTFL == 'Y' & IAFL == 'Y' & ANLFL == 'Y' & AVISIT \%like any\% c('BASE\%','\%WEEK\%'), 
              select = c('STUDYID', 'USUBJID', 'ITTFL', 'ANLFL', 'ARM', 'AVISIT', 'AVISITN', 'PARAMCD', 'AVAL', 'AVALU', 'BASE', 'CHG', 'PCHG',
               'LBSTRESC', 'LBSTRESN'))

# calculate the minimum AVAL for each PARAMCD
PARAM_MINS <- ALB_SUBSET \%>\%
select(USUBJID, PARAMCD, AVAL) \%>\%
  filter(PARAMCD \%in\% param_choices) \%>\%
  group_by(PARAMCD) \%>\%
  summarise(AVAL_MIN=min(AVAL, na.rm=TRUE))
  
# post process the data to create several new variables and adjust existing record specific valules per specification
# - create a visit code variable - baseline record code is "BB" and week records coded to "W NN"
# - adjust existing BASELINE record values where values are missing: According to SPA this is a STREAM artifact
ALB_SUPED1 <- ALB_SUBSET \%>\% mutate(AVISITCD = paste0(substr(AVISIT,start=1, stop=1), 
                                        substr(AVISIT, start=regexpr(" ", AVISIT), stop=regexpr(" ", AVISIT)+2))) \%>\%
               mutate(AVISITCDN =  ifelse(AVISITCD == "BB", 0, substr(AVISITCD,start=2, stop=4))) \%>\%
               mutate(BASE = ifelse(AVISIT == "BASELINE" & is.na(BASE), AVAL, BASE)) \%>\%
               mutate(CHG = ifelse(AVISIT == "BASELINE" & is.na(CHG), 0, CHG)) \%>\%
               mutate(PCHG = ifelse(AVISIT == "BASELINE" & is.na(PCHG), 0, PCHG))
               # may need to add similar code for BASE2 related variables

  
# merge minimum AVAL value onto the ALB data to calculate the log2 variables and preserve the variable order
ALB_SUPED2 <- merge(ALB_SUPED1, PARAM_MINS, by="PARAMCD")[, union(names(ALB_SUPED1), names(PARAM_MINS))] \%>\%
       mutate(AVALL2 = ifelse(AVAL == 0, log2(AVAL_MIN/2), log2(AVAL))) \%>\%
       mutate(BASEL2 = ifelse(BASE == 0, log2(AVAL_MIN/2), log2(BASE))) #\%>\% need SPA to finish adding BASE2 to ALB
       #mutate(BASE2L2 = ifelse(BASE2 == 0, log2(AVAL_MIN/2), log2(AVAL)))

# for proper chronological ordering of visits in visualizations
ALB_SUPED2$AVISITCDN <- as.numeric(ALB_SUPED2$AVISITCDN) # coerce character into numeric
ALB <- ALB_SUPED2 \%>\% mutate(AVISITCD = factor(AVISITCD) \%>\% reorder(AVISITCDN))


x <- teal::init(
  data = list(ASL = ASL, ALB = ALB),
  modules = root_modules(
    tm_g_scatterplot(
       label = "Scatter Plot",
       dataname = "ALB",
       param_var = "PARAMCD",
       param_choices = param_choices,
       param = "CRP",
       xaxis_var = "BASE",
       xaxis_var_choices = c("AVAL", "BASE", "CHG", "PCHG", "BASE2", "CHG2", "PCHG2", "AVALL2", "BASEL2", "BASE2L2"),
       yaxis_var = "AVAL",
       yaxis_var_choices = c("AVAL", "BASE", "CHG", "PCHG", "BASE2", "CHG2", "PCHG2", "AVALL2", "BASEL2", "BASE2L2"),
       trt_group = "ARM",
       trt_group_choices = c("ARM", "ARMCD"),
       plot_width = c(800, 200, 2000),
       plot_height = c(800, 200, 2000),
       facet = FALSE,
       reg_line = FALSE,
       font_size = c(12, 8, 20),
       dot_size = c(1, 1, 12)
   )
  )
)

shinyApp(x$ui, x$server)

}
}
\author{
Balazs Toth

first last
}
