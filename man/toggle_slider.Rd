% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/toggleable_slider.R
\name{toggle_slider}
\alias{toggle_slider}
\alias{toggle_slider_ui}
\alias{toggle_slider_server}
\alias{keep_slider_state_updated}
\title{UI with a toggleable dichotomous slider to change between slider and numeric input fields}
\usage{
toggle_slider_ui(id, label)

toggle_slider_server(id, initial_state, print = FALSE, ...)

keep_slider_state_updated(
  intial_state,
  varname,
  paramname,
  ANL,
  trt_group = NULL,
  step = NULL
)
}
\arguments{
\item{id}{\code{character} module id}

\item{label}{\code{label} label for input field, e.g. slider or numeric inputs}

\item{initial_state}{\code{reactiveValues} list with min, max, step, value and change_counter.
\code{initial_state} provides the initial state for the slider and the numeric inputs,
it can also help to reset the states from outside the shiny module.
Check the \code{keep_slider_state_updated} for a common way to reset the slider state.
min - The min range of the slider.
max - The max range of the slider.
step - The step size of the slider and numericInput.
value - The selected values of the slider.
change_counter - A counter to make sure that we also reset the slider even if the previous and current state is same.}

\item{...}{additional parameters to pass to \code{sliderInput}}
}
\value{
\code{NULL}.
}
\description{
This is useful when a slider should be shown, but it is sometimes hard to configure sliders,
so one can toggle to one or two numeric input fields to set slider instead.
The toggle button will show two numeric input field for selecting the from and to range.
}
\examples{

# use non-exported function from teal.goshawk
toggle_slider_ui <- getFromNamespace("toggle_slider_ui", "teal.goshawk")
toggle_slider_server <- getFromNamespace("toggle_slider_server", "teal.goshawk")

ui <- fluidPage(
  shinyjs::useShinyjs(),
  toggle_slider_ui(
    "toggle_slider", "Select value"
  ),
  verbatimTextOutput("value")
)

server <- function(input, output, session) {
  init_state <- reactiveValues(min = 0, max = 10, value = c(3, 6), step = 0.5, change_counter = 0)
  range_value <- toggle_slider_server("toggle_slider", init_state)
  messages <- reactiveVal() #' to keep history
  observeEvent(range_value(), {
    list_with_names_str <- function(x) paste(names(x), x, sep = ": ", collapse = ", ")
    messages(c(messages(), list_with_names_str(range_value())))
  })
  output$value <- renderText({
    paste(messages(), collapse = "\n")
  })
}

if (interactive()) {
  shinyApp(ui, server)
}
}
\keyword{internal}
